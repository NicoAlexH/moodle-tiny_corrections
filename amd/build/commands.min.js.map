{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Common values helper for the Moodle tiny_corrections plugin.\n *\n * @module      tiny_corrections\n * @copyright   2024 Universit√© de Lausanne\n * @author      Nicolas Alexandropoulos <nicolas.alexandropoulos@unil.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport {component} from './common';\nimport {getCorrTypes} from \"./options\";\n\n\n/**\n * Update the editor content with the correction type and comment.\n * @param {string} data\n * @param {editor} editor\n */\nfunction updateEditorTextContent(data, editor) {\n    const correction_type = data.correction_type;\n    const correction_comment = data.correction_comment;\n\n    let whole_content = editor.getContent({format: 'html'});\n    let current_selection = editor.selection.getContent({});\n    let updated_selection =\n        `<span class=\"tiny_corrections\">\n                    ${current_selection}\n                    <span class=\"tiny_corrections_correction\">\n                        <sup title=\"${current_selection}\">${correction_type}</sup>\n                        <span class=\"tiny_corrections_comment\">${correction_comment}</span>\n                    </span>\n                </span>`;\n    let updated_content = whole_content.replace(current_selection, updated_selection);\n    editor.setContent(updated_content);\n}\n\n/**\n * Add a correction on the current selection.\n * @param {editor} editor\n * @returns {void}\n */\nfunction addCorrection(editor) {\n    let correction_types_array = parseCorrectionTypes(editor);\n\n    editor.windowManager.open({\n        title: 'Add a correction',\n        body: {\n            type: 'panel',\n            items: [\n                {\n                    type: 'selectbox',\n                    name: 'correction_type',\n                    label: 'Correction type',\n                    items: correction_types_array\n                },\n                {\n                    type: 'textarea',\n                    name: 'correction_comment',\n                    label: 'Comment'\n                }\n            ]\n        },\n        buttons: [\n            {\n                type: 'submit',\n                text: 'OK'\n            }\n        ],\n        initialData: {\n            correction_type: 'none',\n            correction_comment: '',\n        },\n        onSubmit: (api) => {\n            const data = api.getData();\n            updateEditorTextContent(data, editor);\n            api.close();\n        }\n    });\n}\n\n/**\n * Fetches the correction types from the server and parses them into an array of objects.\n * @param {editor} editor\n * @returns {{text: *, value: *}[]}\n */\nfunction parseCorrectionTypes(editor) {\n    let correction_types = getCorrTypes(editor);\n    correction_types = correction_types.replace(/\\n$/, '');\n\n    let correction_types_array = correction_types.split('\\n').map((line) => {\n        let [value, text] = line.split('=');\n        return {text: text, value: value};\n    });\n\n    return correction_types_array;\n}\n\n/**\n * Remove the correction on the current selection or cursor position\n * @param {editor} editor\n */\nfunction removeCorrection(editor) {\n    let selection = editor.selection.getNode();\n    if (selection.classList.contains('tiny_corrections')) {\n        selection.querySelector('.tiny_corrections_correction').remove();\n        selection.attributes.removeNamedItem('class');\n    }\n\n}\n\nexport const getSetup = async () => {\n    const [\n        addCorrectionButtonTitle,\n        removeCorrectionButtonTitle,\n    ] = await Promise.all([\n        getString('button_addcorrection', component),\n        getString('button_removecorrection', component),\n    ]);\n\n    let addIcon = await fetch(window.M.cfg.wwwroot + \"/lib/editor/tiny/plugins/corrections/pix/add.svg\")\n        .then((response) => response.text());\n    let removeIcon = await fetch(window.M.cfg.wwwroot + \"/lib/editor/tiny/plugins/corrections/pix/remove.svg\")\n        .then((response) => response.text());\n\n    return (editor) => {\n        editor.ui.registry.addIcon('commentAdd', addIcon);\n        editor.ui.registry.addIcon('commentRemove', removeIcon);\n\n        editor.contentCSS.push(window.M.cfg.wwwroot + '/lib/editor/tiny/plugins/corrections/styles.css');\n\n        editor.ui.registry.addButton('add_correction', {\n            icon: 'commentAdd',\n            tooltip: addCorrectionButtonTitle,\n            onAction: () => addCorrection(editor)\n        });\n\n        editor.ui.registry.addButton('remove_correction', {\n            icon: 'commentRemove',\n            tooltip: removeCorrectionButtonTitle,\n            onAction: () => removeCorrection(editor)\n        });\n    };\n};"],"names":["addCorrection","editor","correction_types_array","correction_types","replace","split","map","line","value","text","parseCorrectionTypes","windowManager","open","title","body","type","items","name","label","buttons","initialData","correction_type","correction_comment","onSubmit","api","data","whole_content","getContent","format","current_selection","selection","updated_selection","updated_content","setContent","updateEditorTextContent","getData","close","async","addCorrectionButtonTitle","removeCorrectionButtonTitle","Promise","all","component","addIcon","fetch","window","M","cfg","wwwroot","then","response","removeIcon","ui","registry","contentCSS","push","addButton","icon","tooltip","onAction","getNode","classList","contains","querySelector","remove","attributes","removeNamedItem","removeCorrection"],"mappings":"oIAyDSA,cAAcC,YACfC,gCA2CsBD,YACtBE,kBAAmB,yBAAaF,eACpCE,iBAAmBA,iBAAiBC,QAAQ,MAAO,IAEtBD,iBAAiBE,MAAM,MAAMC,KAAKC,WACtDC,MAAOC,MAAQF,KAAKF,MAAM,WACxB,CAACI,KAAMA,KAAMD,MAAOA,UAjDFE,CAAqBT,QAElDA,OAAOU,cAAcC,KAAK,CACtBC,MAAO,mBACPC,KAAM,CACFC,KAAM,QACNC,MAAO,CACH,CACID,KAAM,YACNE,KAAM,kBACNC,MAAO,kBACPF,MAAOd,wBAEX,CACIa,KAAM,WACNE,KAAM,qBACNC,MAAO,aAInBC,QAAS,CACL,CACIJ,KAAM,SACNN,KAAM,OAGdW,YAAa,CACTC,gBAAiB,OACjBC,mBAAoB,IAExBC,SAAWC;;;;;;;;;SAtDcC,KAAMxB,cAC7BoB,gBAAkBI,KAAKJ,gBACvBC,mBAAqBG,KAAKH,uBAE5BI,cAAgBzB,OAAO0B,WAAW,CAACC,OAAQ,SAC3CC,kBAAoB5B,OAAO6B,UAAUH,WAAW,IAChDI,iFAEcF,mIAEgBA,+BAAsBR,kGACKC,oFAGzDU,gBAAkBN,cAActB,QAAQyB,kBAAmBE,mBAC/D9B,OAAOgC,WAAWD,iBAyCVE,CADaV,IAAIW,UACalC,QAC9BuB,IAAIY,8GAmCQC,gBAEhBC,yBACAC,mCACMC,QAAQC,IAAI,EAClB,mBAAU,uBAAwBC,oBAClC,mBAAU,0BAA2BA,yBAGrCC,cAAgBC,MAAMC,OAAOC,EAAEC,IAAIC,QAAU,oDAC5CC,MAAMC,UAAaA,SAASzC,SAC7B0C,iBAAmBP,MAAMC,OAAOC,EAAEC,IAAIC,QAAU,uDAC/CC,MAAMC,UAAaA,SAASzC,gBAEzBR,SACJA,OAAOmD,GAAGC,SAASV,QAAQ,aAAcA,SACzC1C,OAAOmD,GAAGC,SAASV,QAAQ,gBAAiBQ,YAE5ClD,OAAOqD,WAAWC,KAAKV,OAAOC,EAAEC,IAAIC,QAAU,mDAE9C/C,OAAOmD,GAAGC,SAASG,UAAU,iBAAkB,CAC3CC,KAAM,aACNC,QAASpB,yBACTqB,SAAU,IAAM3D,cAAcC,UAGlCA,OAAOmD,GAAGC,SAASG,UAAU,oBAAqB,CAC9CC,KAAM,gBACNC,QAASnB,4BACToB,SAAU,aAtCI1D,YAClB6B,UAAY7B,OAAO6B,UAAU8B,UAC7B9B,UAAU+B,UAAUC,SAAS,sBAC7BhC,UAAUiC,cAAc,gCAAgCC,SACxDlC,UAAUmC,WAAWC,gBAAgB,UAkCjBC,CAAiBlE"}