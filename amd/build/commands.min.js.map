{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["import {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    startdemoButtonName,\n    startdemoMenuItemName,\n    icon,\n} from './common';\n\nconst addCorrection = (editor) => {\n    editor.windowManager.open({\n        title: 'Add a correction',\n        body: {\n            type: 'panel',\n            items: [\n                {\n                    type: 'selectbox',\n                    name: 'correction_type',\n                    label: 'Correction type',\n                    items: [\n                        { text: 'None', value: 'none' },\n                        { text: 'Spelling', value: 'spelling' },\n                        { text: 'Grammar', value: 'grammar' },\n                        { text: 'Punctuation', value: 'punctuation' },\n                        { text: 'Other', value: 'other' }\n                    ]\n                },\n                {\n                    type: 'textarea',\n                    name: 'correction_comment',\n                    label: 'Comment'\n                }\n            ]\n        },\n        buttons: [\n            {\n                type: 'submit',\n                text: 'OK'\n            }\n        ],\n        initialData: {\n            correction_type: 'none',\n            correction_comment: '',\n        },\n        onSubmit: (api) => {\n            const data = api.getData();\n            const correction_type = data.correction_type;\n            const correction_comment = data.correction_comment;\n\n            let whole_content = editor.getContent({ format: 'html' });\n            let current_selection = editor.selection.getContent({});\n            let updated_selection =\n                `<span class=\"tiny_corrections\">\n                    ${current_selection}\n                    <span class=\"tiny_corrections_correction\">\n                        <sup title=\"${current_selection}\">${correction_type}</sup>\n                        <span class=\"tiny_corrections_comment\">${correction_comment}</span>\n                    </span>\n                </span>`;\n            let updated_content = whole_content.replace(current_selection, updated_selection);\n            editor.setContent(updated_content);\n            api.close();\n\n            //TODO test to check if it works\n            addCssRules();\n        }\n    });\n}\n\nconst addCssRules = () => {\n    const style = document.createElement('style');\n    style.innerHTML = `\n        .tiny_corrections {\n            border-bottom: 2px dashed #ff0000!important;\n        }\n        \n        .tiny_corrections sup {\n            color: #ff0000;\n            border: none;\n            text-transform: uppercase;\n        }\n        \n        .tiny_corrections_comment {\n            display: none;\n        }\n        \n        .tiny_corrections:hover .tiny_corrections_comment {\n            display: inline;\n        }\n    `;\n    document.head.appendChild(style);\n}\n\n\n\nexport const getSetup = async() => {\n    const [\n        startdemoButtonNameTitle,\n        startdemoMenuItemNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n        getString('button_startdemo', component),\n        getString('menuitem_startdemo', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) =>\n\n\n    {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the startdemo Toolbar Button.\n        editor.ui.registry.addButton(startdemoButtonName, {\n            icon,\n            tooltip: \"Add correction\",\n            onAction: () => addCorrection(editor)\n        });\n\n        window.console.log(editor)\n\n        // Add the startdemo Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(startdemoMenuItemName, {\n            icon,\n            text: \"Add correction\",\n            onAction: () => addCorrection(editor)\n        });\n    };\n};"],"names":["addCorrection","editor","windowManager","open","title","body","type","items","name","label","text","value","buttons","initialData","correction_type","correction_comment","onSubmit","api","data","getData","whole_content","getContent","format","current_selection","selection","updated_selection","updated_content","replace","setContent","close","addCssRules","style","document","createElement","innerHTML","head","appendChild","async","startdemoButtonNameTitle","startdemoMenuItemNameTitle","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","startdemoButtonName","tooltip","onAction","window","console","log","addMenuItem","startdemoMenuItemName"],"mappings":"wNASMA,cAAiBC,SACnBA,OAAOC,cAAcC,KAAK,CACtBC,MAAO,mBACPC,KAAM,CACFC,KAAM,QACNC,MAAO,CACH,CACID,KAAM,YACNE,KAAM,kBACNC,MAAO,kBACPF,MAAO,CACH,CAAEG,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,WAAYC,MAAO,YAC3B,CAAED,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,cAAeC,MAAO,eAC9B,CAAED,KAAM,QAASC,MAAO,WAGhC,CACIL,KAAM,WACNE,KAAM,qBACNC,MAAO,aAInBG,QAAS,CACL,CACIN,KAAM,SACNI,KAAM,OAGdG,YAAa,CACTC,gBAAiB,OACjBC,mBAAoB,IAExBC,SAAWC,YACDC,KAAOD,IAAIE,UACXL,gBAAkBI,KAAKJ,gBACvBC,mBAAqBG,KAAKH,uBAE5BK,cAAgBnB,OAAOoB,WAAW,CAAEC,OAAQ,SAC5CC,kBAAoBtB,OAAOuB,UAAUH,WAAW,IAChDI,iFAEMF,mIAEgBA,+BAAsBT,kGACKC,oFAGjDW,gBAAkBN,cAAcO,QAAQJ,kBAAmBE,mBAC/DxB,OAAO2B,WAAWF,iBAClBT,IAAIY,QAGJC,kBAKNA,YAAc,WACVC,MAAQC,SAASC,cAAc,SACrCF,MAAMG,idAmBNF,SAASG,KAAKC,YAAYL,0BAKNM,gBAEhBC,yBACAC,2BACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,mBAAoBC,oBAC9B,mBAAU,qBAAsBA,oBAChC,yBAAe,OAAQA,4BAGnB1C,SAKJA,OAAO2C,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7C/C,OAAO2C,GAAGC,SAASI,UAAUC,4BAAqB,CAC9CH,KAAAA,aACAI,QAAS,iBACTC,SAAU,IAAMpD,cAAcC,UAGlCoD,OAAOC,QAAQC,IAAItD,QAInBA,OAAO2C,GAAGC,SAASW,YAAYC,8BAAuB,CAClDV,KAAAA,aACArC,KAAM,iBACN0C,SAAU,IAAMpD,cAAcC"}