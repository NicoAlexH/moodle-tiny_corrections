define("tiny_corrections/commands",["exports","editor_tiny/utils","core/str","./common"],(function(_exports,_utils,_str,_common){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=void 0;const addCorrection=editor=>{editor.windowManager.open({title:"Add a correction",body:{type:"panel",items:[{type:"selectbox",name:"correction_type",label:"Correction type",items:[{text:"None",value:"none"},{text:"Spelling",value:"spelling"},{text:"Grammar",value:"grammar"},{text:"Punctuation",value:"punctuation"},{text:"Other",value:"other"}]},{type:"textarea",name:"correction_comment",label:"Comment"}]},buttons:[{type:"submit",text:"OK"}],initialData:{correction_type:"none",correction_comment:""},onSubmit:api=>{const data=api.getData(),correction_type=data.correction_type,correction_comment=data.correction_comment;let whole_content=editor.getContent({format:"html"}),current_selection=editor.selection.getContent({}),updated_selection='<span class="tiny_corrections">\n                    '.concat(current_selection,'\n                    <span class="tiny_corrections_correction">\n                        <sup title="').concat(current_selection,'">').concat(correction_type,'</sup>\n                        <span class="tiny_corrections_comment">').concat(correction_comment,"</span>\n                    </span>\n                </span>"),updated_content=whole_content.replace(current_selection,updated_selection);editor.setContent(updated_content),api.close(),addCssRules()}})},addCssRules=()=>{const style=document.createElement("style");style.innerHTML="\n        .tiny_corrections {\n            border-bottom: 2px dashed #ff0000!important;\n        }\n        \n        .tiny_corrections sup {\n            color: #ff0000;\n            border: none;\n            text-transform: uppercase;\n        }\n        \n        .tiny_corrections_comment {\n            display: none;\n        }\n        \n        .tiny_corrections:hover .tiny_corrections_comment {\n            display: inline;\n        }\n    ",document.head.appendChild(style)};_exports.getSetup=async()=>{const[startdemoButtonNameTitle,startdemoMenuItemNameTitle,buttonImage]=await Promise.all([(0,_str.get_string)("button_startdemo",_common.component),(0,_str.get_string)("menuitem_startdemo",_common.component),(0,_utils.getButtonImage)("icon",_common.component)]);return editor=>{editor.ui.registry.addIcon(_common.icon,buttonImage.html),editor.ui.registry.addButton(_common.startdemoButtonName,{icon:_common.icon,tooltip:"Add correction",onAction:()=>addCorrection(editor)}),window.console.log(editor),editor.ui.registry.addMenuItem(_common.startdemoMenuItemName,{icon:_common.icon,text:"Add correction",onAction:()=>addCorrection(editor)})}}}));

//# sourceMappingURL=commands.min.js.map